trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: self
      type: github
      connection: github-bestrong-connection
      name: $(Build.Repository.Name)
      ref: $(Build.SourceBranch)

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: terraformVersion
    value: '1.5.7'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)'
  - group: terraform-variables

stages:
  # PR Stage - runs on Pull Requests
  - stage: PR_Validation
    displayName: 'PR Validation'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: ValidateTerraform
        displayName: 'Validate Terraform Configuration'
        steps:
          - checkout: self
          
          - task: Bash@3
            displayName: 'Install Terraform $(terraformVersion)'
            inputs:
              targetType: 'inline'
              script: |
                wget -q https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip -q terraform_$(terraformVersion)_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform version
          
          - task: DownloadSecureFile@1
            name: envFile
            displayName: 'Download Terraform Environment File'
            inputs:
              secureFile: 'terraform.env'
          
          - task: Bash@3
            displayName: 'Convert Environment File to Unix Format'
            inputs:
              targetType: 'inline'
              script: |
                tr -d '\r' < "$(envFile.secureFilePath)" > unix_env_file.tmp
                cp unix_env_file.tmp "$(envFile.secureFilePath)"
                rm unix_env_file.tmp
                echo "Environment file converted to Unix format"
          
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                export TF_VAR_subscription_id=$(echo "$TF_VAR_subscription_id" | tr -d '\r')
                echo "Using subscription ID: $TF_VAR_subscription_id"
                
                terraform init \
                  -backend-config="storage_account_name=$(TF_STATE_SA)" \
                  -backend-config="container_name=$(TF_STATE_CONTAINER)" \
                  -backend-config="resource_group_name=$(TF_STATE_RG)"
              workingDirectory: '$(workingDirectory)'
          
          - task: AzureCLI@2
            displayName: 'Terraform Validate'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                export TF_VAR_subscription_id=$(echo "$TF_VAR_subscription_id" | tr -d '\r')
                echo "Using subscription ID: $TF_VAR_subscription_id"
                
                terraform validate
              workingDirectory: '$(workingDirectory)'
          
          - task: AzureCLI@2
            displayName: 'Terraform Plan'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                export TF_VAR_subscription_id=$(echo "$TF_VAR_subscription_id" | tr -d '\r')
                echo "Using subscription ID: $TF_VAR_subscription_id"
                
                terraform plan -out=tfplan
              workingDirectory: '$(workingDirectory)'

      - job: TriggerMainPipeline
        displayName: 'Trigger Main Pipeline on Merge'
        dependsOn: ValidateTerraform
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranchName'], 'main'))
        steps:
          - task: PowerShell@2
            displayName: 'Wait for PR to be merged'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "This job executes when a PR targeting main branch is completed. It will trigger the main branch pipeline."
                Write-Host "PR ID: $(System.PullRequest.PullRequestId)"
                Write-Host "PR Number: $(System.PullRequest.PullRequestNumber)"
                Write-Host "Target Branch: $(System.PullRequest.TargetBranch)"
                
                # Wait a bit to ensure PR is merged
                Start-Sleep -Seconds 30
          
          - task: PowerShell@2
            displayName: 'Trigger Main Branch Pipeline'
            inputs:
              targetType: 'inline'
              script: |
                $token = "$(System.AccessToken)"
                $orgUrl = "$(System.CollectionUri)"
                $projectName = "$(System.TeamProject)"
                $pipelineId = "$(System.DefinitionId)"
                
                $headers = @{
                  Authorization = "Bearer $token"
                  "Content-Type" = "application/json"
                }
                
                $body = @{
                  resources = @{
                    repositories = @{
                      self = @{
                        refName = "refs/heads/main"
                      }
                    }
                  }
                } | ConvertTo-Json -Depth 10
                
                $uri = "$orgUrl$projectName/_apis/pipelines/$pipelineId/runs?api-version=6.0"
                
                Write-Host "Triggering pipeline on main branch..."
                Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  
  # Main Branch Stage - runs on main branch for CI/CD
  - stage: CI_CD
    displayName: 'CI/CD Pipeline'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), and(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranchName'], 'main'))))
    jobs:
      - job: DeployTerraform
        displayName: 'Deploy Infrastructure'
        steps:
          - checkout: self
          
          - task: Bash@3
            displayName: 'Install Terraform $(terraformVersion)'
            inputs:
              targetType: 'inline'
              script: |
                wget -q https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip -q terraform_$(terraformVersion)_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform version
          
          - task: DownloadSecureFile@1
            name: envFile
            displayName: 'Download Terraform Environment File'
            inputs:
              secureFile: 'terraform.env'
          
          - task: Bash@3
            displayName: 'Convert Environment File to Unix Format'
            inputs:
              targetType: 'inline'
              script: |
                tr -d '\r' < "$(envFile.secureFilePath)" > unix_env_file.tmp
                cp unix_env_file.tmp "$(envFile.secureFilePath)"
                rm unix_env_file.tmp
                echo "Environment file converted to Unix format"
          
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                export TF_VAR_subscription_id=$(echo "$TF_VAR_subscription_id" | tr -d '\r')
                echo "Using subscription ID: $TF_VAR_subscription_id"
                
                terraform init \
                  -backend-config="storage_account_name=$(TF_STATE_SA)" \
                  -backend-config="container_name=$(TF_STATE_CONTAINER)" \
                  -backend-config="resource_group_name=$(TF_STATE_RG)"
              workingDirectory: '$(workingDirectory)'
          
          - task: AzureCLI@2
            displayName: 'Terraform Validate'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                export TF_VAR_subscription_id=$(echo "$TF_VAR_subscription_id" | tr -d '\r')
                echo "Using subscription ID: $TF_VAR_subscription_id"
                
                terraform validate
              workingDirectory: '$(workingDirectory)'
          
          - task: AzureCLI@2
            displayName: 'Terraform Plan'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                export TF_VAR_subscription_id=$(echo "$TF_VAR_subscription_id" | tr -d '\r')
                echo "Using subscription ID: $TF_VAR_subscription_id"
                
                terraform plan -out=tfplan
              workingDirectory: '$(workingDirectory)'
          
          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                export TF_VAR_subscription_id=$(echo "$TF_VAR_subscription_id" | tr -d '\r')
                echo "Using subscription ID: $TF_VAR_subscription_id"
                
                terraform apply -auto-approve tfplan
              workingDirectory: '$(workingDirectory)' 