 trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: terraform-variables
  - name: TF_VERSION
    value: '1.5.7'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)'

stages:
  - stage: Validate
    displayName: 'Validate Terraform Configuration'
    jobs:
      - job: Validate
        displayName: 'Run Terraform Validate'
        steps:
          - checkout: self
          
          - task: DownloadSecureFile@1
            name: envFile
            inputs:
              secureFile: 'terraform.env'
          
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(TF_VERSION)
          
          - task: AzureCLI@2
            displayName: 'Setup Environment Variables'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                export ARM_CLIENT_ID=$TF_VAR_client_id
                export ARM_CLIENT_SECRET=$TF_VAR_client_secret
                export ARM_TENANT_ID=$TF_VAR_tenant_id
                export ARM_SUBSCRIPTION_ID=$TF_VAR_subscription_id
                
                if [ -z "$ARM_CLIENT_ID" ] || [ -z "$ARM_CLIENT_SECRET" ] || [ -z "$ARM_TENANT_ID" ] || [ -z "$ARM_SUBSCRIPTION_ID" ]; then
                  echo "Error: Missing required environment variables"
                  exit 1
                fi
          
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform init
              workingDirectory: '$(workingDirectory)'
          
          - task: AzureCLI@2
            displayName: 'Terraform Validate'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform validate
              workingDirectory: '$(workingDirectory)'

  - stage: Plan
    displayName: 'Plan Terraform Changes'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: Plan
        displayName: 'Run Terraform Plan'
        steps:
          - checkout: self
          
          - task: DownloadSecureFile@1
            name: envFile
            inputs:
              secureFile: 'terraform.env'
          
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(TF_VERSION)
          
          - task: AzureCLI@2
            displayName: 'Setup Environment Variables'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                export ARM_CLIENT_ID=$TF_VAR_client_id
                export ARM_CLIENT_SECRET=$TF_VAR_client_secret
                export ARM_TENANT_ID=$TF_VAR_tenant_id
                export ARM_SUBSCRIPTION_ID=$TF_VAR_subscription_id
          
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform init
              workingDirectory: '$(workingDirectory)'
          
          - task: AzureCLI@2
            displayName: 'Terraform Plan'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform plan \
                  -var="client_id=$TF_VAR_client_id" \
                  -var="client_secret=$TF_VAR_client_secret" \
                  -var="tenant_id=$TF_VAR_tenant_id" \
                  -var="subscription_id=$TF_VAR_subscription_id" \
                  -var="sql_admin_username=$TF_VAR_sql_admin_username" \
                  -var="sql_admin_password=$TF_VAR_sql_admin_password" \
                  -var="tags=$(TAGS)" \
                  -out=tfplan
              workingDirectory: '$(workingDirectory)'

  - stage: Apply
    displayName: 'Apply Terraform Changes'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: Apply
        displayName: 'Run Terraform Apply'
        steps:
          - checkout: self
          
          - task: DownloadSecureFile@1
            name: envFile
            inputs:
              secureFile: 'terraform.env'
          
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(TF_VERSION)
          
          - task: AzureCLI@2
            displayName: 'Setup Environment Variables'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                export ARM_CLIENT_ID=$TF_VAR_client_id
                export ARM_CLIENT_SECRET=$TF_VAR_client_secret
                export ARM_TENANT_ID=$TF_VAR_tenant_id
                export ARM_SUBSCRIPTION_ID=$TF_VAR_subscription_id
          
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform init
              workingDirectory: '$(workingDirectory)'
          
          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              azureSubscription: '$(ARM_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform apply -auto-approve \
                  -var="client_id=$TF_VAR_client_id" \
                  -var="client_secret=$TF_VAR_client_secret" \
                  -var="tenant_id=$TF_VAR_tenant_id" \
                  -var="subscription_id=$TF_VAR_subscription_id" \
                  -var="sql_admin_username=$TF_VAR_sql_admin_username" \
                  -var="sql_admin_password=$TF_VAR_sql_admin_password" \
                  -var="tags=$(TAGS)"
              workingDirectory: '$(workingDirectory)'